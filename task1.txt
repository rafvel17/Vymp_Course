1. Реализовать модель "БР", движущейся по параболе для заданных пары Тс+Тп, максимальной высоты полёта и времени старта.

    struct tPoint {
        double x, y;
        tPoint(double p_x = 0, double p_y = 0) : x(p_x), y(p_y) {}
    };

    template <typename tMover> class tElement {
        protected:
            double t0;
            tMover mover;

        public:
            tElement(const tPoint& p_from, const tPoint& p_to, double p_maxH, double p_t0 = 0)
                : t0(p_t0)
                , mover(p_from, p_to, p_maxH)
            {
            }

            inline double launch() const {
                return t0;
            }

            inline double boom() const {
                return t0 + mover.flightT();
            }

            inline const tPoint& position() {
                return mover.position();
            }

            bool isValid() {
                // TODO
            }

            virtual void Move(double t) {
                if (t < t0) return;
                mover.Move(t - t0);
            }
    };

    class Parabola {
        public:
            Parabola(const tPoint& p_from, const tPoint& p_to, double p_maxH) {
                // TODO
            }

            double flightT() const {
                // TODO
            }

            const tPoint& position() const {
                // TODO
            }

            void Move(double t) {
                // TODO
            }
    };

2. Реализовать ввод (консольный или файловый) данных пользователя, в котором принимаются следуюие данные:
   - количество БР в ударе
   - для каждой БР: точка старта, точка падения, максимальная высота, задержка старта
* альтернативно допускается генерация "удара" такими "БР" из некоторой окрестности начала координат специальным методом по следующей схеме:
        В метод передаётся (конкретные значения можно вводить с экрана или подчитывать из конфига):
    int N = 50;     // количество БР в ударе
    double S = 100; // максимальное удаление точки старта от [0;0]
    double R = 500; // максимальная дальность полёта
    double H = 400; // максимальная высота полёта
    double T = 100; // максимальная задержка времени старта
        из метода возвращается:
    std::vector<tElement<Parabola>> strike;

3. Для полученного "удара" реализовать механизмы:
- подсчета максимального количества "БР" в воздухе и сверки с соответствующим ограничением, задаваемым разработчиком:
    int maxBMs(const std::vector<tElement<Parabola>>& p_strike) {
        // TODO
    }
    if (maxBMs(...) > someBmLimit) { ... }
- определения положения любого элемента удара на произвольный момент времени.

4. Реализовать два типа логгирования - в контексте БР и в контексте приложения, при этом:
- в отдельный лог, создаваемый для каждой БР, выводить факт старта, распечатку по времени с заданным шагом текущих координат, факт падения.
- в отдельный лог приложения выводить общую статистику (сколько летит, длительность удара, диапазон скоростей), жалобы на действия пользователя (ввод некорректных значений) и ошибки программы (нет конфига, ошибки создания логов ...)

5. Логи делать с применением шаблонов проектирования Singleton/Multiton
